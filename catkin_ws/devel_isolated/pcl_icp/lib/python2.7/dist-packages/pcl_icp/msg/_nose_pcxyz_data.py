# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pcl_icp/nose_pcxyz_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class nose_pcxyz_data(genpy.Message):
  _md5sum = "c1bcc417cdf6514a0c8a8d9befe1cdd8"
  _type = "pcl_icp/nose_pcxyz_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 pc_lnx
float32 pc_lny
float32 pc_lnz
float32 pc_rnx
float32 pc_rny
float32 pc_rnz
"""
  __slots__ = ['pc_lnx','pc_lny','pc_lnz','pc_rnx','pc_rny','pc_rnz']
  _slot_types = ['float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pc_lnx,pc_lny,pc_lnz,pc_rnx,pc_rny,pc_rnz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(nose_pcxyz_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pc_lnx is None:
        self.pc_lnx = 0.
      if self.pc_lny is None:
        self.pc_lny = 0.
      if self.pc_lnz is None:
        self.pc_lnz = 0.
      if self.pc_rnx is None:
        self.pc_rnx = 0.
      if self.pc_rny is None:
        self.pc_rny = 0.
      if self.pc_rnz is None:
        self.pc_rnz = 0.
    else:
      self.pc_lnx = 0.
      self.pc_lny = 0.
      self.pc_lnz = 0.
      self.pc_rnx = 0.
      self.pc_rny = 0.
      self.pc_rnz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.pc_lnx, _x.pc_lny, _x.pc_lnz, _x.pc_rnx, _x.pc_rny, _x.pc_rnz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.pc_lnx, _x.pc_lny, _x.pc_lnz, _x.pc_rnx, _x.pc_rny, _x.pc_rnz,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f().pack(_x.pc_lnx, _x.pc_lny, _x.pc_lnz, _x.pc_rnx, _x.pc_rny, _x.pc_rnz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.pc_lnx, _x.pc_lny, _x.pc_lnz, _x.pc_rnx, _x.pc_rny, _x.pc_rnz,) = _get_struct_6f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f = None
def _get_struct_6f():
    global _struct_6f
    if _struct_6f is None:
        _struct_6f = struct.Struct("<6f")
    return _struct_6f
